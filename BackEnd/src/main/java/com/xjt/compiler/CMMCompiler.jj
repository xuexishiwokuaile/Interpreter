/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. CMMCompiler.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */

options
{
  static = true;
}

PARSER_BEGIN(CMMCompiler)

import java.util.*;

public class CMMCompiler/*@bgen(jjtree)*/implements CMMCompilerTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTCMMCompilerState jjtree = new JJTCMMCompilerState();

/*@egen*/
    public static void main(String[] args) throws ParseException{
        new CMMCompiler(System.in);
        SimpleNode n = CMMCompiler.Start();
    }
}

PARSER_END(CMMCompiler)

SKIP : {
    " "
    |  "\t"
    |  "\n"
    |  "\r"
    |  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
    |  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

//\u940e\u89c4\u77ee\u7ee0\u71bc\u5d17\u93b6\u82a5\u669b\u940e\u6db3\u62f7
TOKEN : {
	<IF: "if">
	| <ELSE: "else">
	| <WHILE: "while">
	| <READ: "read">
	| <WRITE: "write">
	| <INT: "int">
	| <REAL: "real">
	| <MAIN: "main">
	| <VOID: "void" >
}

//\u940e\u89c4\u77ee\u7ee0\u71bc\u61db\u984f\u55d7\u59e7\u95ba\u4f8a\u62f7
TOKEN : {
	<INTEGER_LITERAL: ["1"-"9"](<DIGIT>)* | "0">
}

//\u940e\u89c4\u77ee\u7ee0\u71ba\ufffd\u572d\u505e\u93c6\ufffd
TOKEN : {
	<REAL_LITERAL: (<DIGIT>)+
	| (<DIGIT>)+"."
	| (<DIGIT>)+"."(<DIGIT>)+
	| "."(<DIGIT>)+>
}

//\u940e\u89c4\u77ee\u7ee0\u71ba\u60b0\u928a\u0441\u4edb\u7f01\u694b\u62f7
TOKEN : {
	<IDENTIFIER: <LETTER>
	| <LETTER>(<LETTER> | <DIGIT> | "_")*(<LETTER> | <DIGIT>)+>
	| <#LETTER: ["a"-"z", "A"-"Z"]>
	| <#DIGIT: ["0"-"9"]>
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < ASSIGN : "=" >
}



SimpleNode Start() : {/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
    try {
/*@egen*/
    Procedure()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Procedure() : {/*@bgen(jjtree) Procedure */
                    SimpleNode jjtn000 = new SimpleNode(JJTPROCEDURE);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/StatementTable st = new StatementTable(); boolean isTrue = true; boolean isLoop = false;}
{/*@bgen(jjtree) Procedure */
    try {
/*@egen*/
    
    <VOID> <MAIN> "(" ")"Block(st, isTrue, isLoop)/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Block(StatementTable st, boolean isTrue, boolean isLoop) : {/*@bgen(jjtree) Block */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Block */
    try {
/*@egen*/
    "{" (Block(st, isTrue, isLoop) | (Statement(st, isTrue, isLoop))+)+ "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Statement(StatementTable st, boolean isTrue, boolean isLoop) : {/*@bgen(jjtree) Statement */
                                                                     SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
                                                                     boolean jjtc000 = true;
                                                                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token d = new Token(); Token i = new Token();}
{/*@bgen(jjtree) Statement */
    try {
/*@egen*/
    Declaration(st, isTrue, isLoop)
    | Assignment(st, isTrue, isLoop)
    | <WHILE> "(" Condition(st, isTrue, true) ")"Block(st, isTrue, true)/*@bgen(jjtree)*/
                                                                        {
                                                                          jjtree.closeNodeScope(jjtn000, true);
                                                                          jjtc000 = false;
                                                                        }
/*@egen*/{
        st.startLoop(isTrue, true);
    }
    | <READ> "(" d = <IDENTIFIER>{ System.out.println("read:");st.read(d,isTrue,isLoop);} (","d = <IDENTIFIER>{ System.out.println("read:");st.read(d,isTrue,isLoop);})* ")" ";" 
    | <WRITE> "("(d= Expression(st, isTrue, isLoop)["["(i = <IDENTIFIER> | i = <INTEGER_LITERAL> )"]"] {
        System.out.println("write:");st.write(d,i, isTrue, isLoop);i.image = null;}
    ) ("," d = Expression(st, isTrue, isLoop)["["(i = <IDENTIFIER> | i = <INTEGER_LITERAL> )"]"] {System.out.println("write:");st.write(d,i, isTrue, isLoop);i.image = null;})* ")" ";"
    | Choice(st, isTrue, isLoop)/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Declaration(StatementTable st, boolean isTrue, boolean isLoop) :
{/*@bgen(jjtree) Declaration */
 SimpleNode jjtn000 = new SimpleNode(JJTDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token state = new Token(); Token type = new Token(); Token d = new Token();}
{/*@bgen(jjtree) Declaration */
    try {
/*@egen*/
    (type = <INT> |type = <REAL>)[d = "[""]"](state = <IDENTIFIER>{
      if(d.image == null) {
        st.addtoArray(type,state, isTrue, isLoop);
        }
      else {
        st.addtoArraylist(type,state, isTrue, isLoop);
        }
      })
    ("," [d = "[""]"]state = <IDENTIFIER>{if(d.image == null) {
        st.addtoArray(type,state, isTrue, isLoop);
        }
      else {
        st.addtoArraylist(type,state, isTrue, isLoop);
        }})* ";"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Assignment(StatementTable st, boolean isTrue, boolean isLoop) : {/*@bgen(jjtree) Assignment */
                                                                      SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT);
                                                                      boolean jjtc000 = true;
                                                                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token state;Token d;Token i=new Token();}
{/*@bgen(jjtree) Assignment */
    try {
/*@egen*/
    (state = <IDENTIFIER>) ["["(i = <IDENTIFIER> | i = <INTEGER_LITERAL> )"]"] "=" (d = Expression(st, isTrue, isLoop)) ";"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { 
      st.assign(state,i,d, isTrue, isLoop);}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

Token Expression(StatementTable st, boolean isTrue, boolean isLoop) : {/*@bgen(jjtree) Expression */
                                                                        SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
                                                                        boolean jjtc000 = true;
                                                                        jjtree.openNodeScope(jjtn000);
/*@egen*/ Token token = new Token(); Token d1 = new Token(); Token d2 = new Token();}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  d1 = Term(st, isTrue, isLoop) [LOOKAHEAD( { getToken(1).image == "+"
|| getToken(1).image == "-" }) (token = <PLUS >|token = <MINUS>) d2 = Expression(st, isTrue, isLoop)]/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
 }
/*@egen*/
 {if(token.image !=null){
   switch(token.image) {
   	case "+":
   	    st.plus(d1, d2, isTrue, isLoop);
   		return d1;
   	case "-":
   	    st.minus(d1, d2, isTrue, isLoop);
   		return d1;}
   	}
   	else {return d1; }
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void Choice(StatementTable st, boolean isTrue, boolean isLoop) : {/*@bgen(jjtree) Choice */
  SimpleNode jjtn000 = new SimpleNode(JJTCHOICE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Choice */
        try {
/*@egen*/
   	<IF> "(" isTrue = Condition(st, isTrue, isLoop) ")"Block(st, isTrue, isLoop)
    (LOOKAHEAD( { getToken(1).image == "else" && getToken(2).image == "if" })<ELSE >< IF>"(" isTrue = Condition(st, isTrue, isLoop) ")" Block(st, isTrue, isLoop))*
     [<ELSE> Block(st, !isTrue, isLoop)]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

boolean Condition(StatementTable st, boolean isTrue, boolean isLoop) : {/*@bgen(jjtree) Condition */
                                                                        SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
                                                                        boolean jjtc000 = true;
                                                                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token left = new Token(); Token right = new Token(); Token sign = new Token();}
{/*@bgen(jjtree) Condition */
    try {
/*@egen*/
    (left = Expression(st, isTrue, isLoop)) ((sign = ">") |(sign = "<") |(sign = "==") |(sign = "<>") |(sign = ">=") |(sign = "<=")) (right = Expression(st, isTrue, isLoop))/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      return st.condition(left,sign,right,isTrue,isLoop);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

Token Term(StatementTable st, boolean isTrue, boolean isLoop) : {/*@bgen(jjtree) Term */
                                                                  SimpleNode jjtn000 = new SimpleNode(JJTTERM);
                                                                  boolean jjtc000 = true;
                                                                  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token token = new Token(); Token d1 = new Token(); Token d2 = new Token(); }
{/*@bgen(jjtree) Term */
 try {
/*@egen*/
 d1 = Factor(st, isTrue, isLoop) [LOOKAHEAD( { getToken(1).image == "*"
|| getToken(1).image == "/" }) (token = <MULTIPLY >|token = <DIVIDE>) d2 = Term(st, isTrue, isLoop)]/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
 }
/*@egen*/
 {if(token.image !=null){
   switch(token.image) {
   	case "*":
   	    st.mult(d1, d2, isTrue, isLoop);
   		return d1;
   	case "/":
   	    st.div(d1, d2, isTrue, isLoop);
   		return d1;}
   	}else {return d1; }
  }/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}


Token Factor(StatementTable st, boolean isTrue, boolean isLoop) : {/*@bgen(jjtree) Factor */
                                                                   SimpleNode jjtn000 = new SimpleNode(JJTFACTOR);
                                                                   boolean jjtc000 = true;
                                                                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token token = new Token();}
{/*@bgen(jjtree) Factor */
   try {
/*@egen*/
   (token = <IDENTIFIER>)/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ {
     	token.value = StatementTable.map.get(token.image);
        return token;
    }
   | (token = <INTEGER_LITERAL>)/*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                 }
/*@egen*/ {
        token.value = Integer.parseInt(token.image);
        return token;

    }
   | (token = <REAL_LITERAL>)/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ {
        token.value = Double.parseDouble(token.image);
        return token;
    }
   | "(" token = Expression(st,isTrue, isLoop) ")"/*@bgen(jjtree)*/
                                                  {
                                                    jjtree.closeNodeScope(jjtn000, true);
                                                    jjtc000 = false;
                                                  }
/*@egen*/{return token;}/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}


