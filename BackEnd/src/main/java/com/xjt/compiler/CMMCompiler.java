/* Generated By:JJTree&JavaCC: Do not edit this line. CMMCompiler.java */
package com.xjt.compiler;
import java.util.*;

public class CMMCompiler/*@bgen(jjtree)*/implements CMMCompilerTreeConstants, CMMCompilerConstants {/*@bgen(jjtree)*/
  static public String token_list = "";

  protected static JJTCMMCompilerState jjtree = new JJTCMMCompilerState();public static void main(String[] args) throws ParseException, DeclarationException, AssignmentException{
        new CMMCompiler(System.in);
        SimpleNode n = CMMCompiler.Start();
    }

  static final public SimpleNode Start() throws ParseException, DeclarationException, AssignmentException {
                      /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Procedure();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      if (jjte000 instanceof DeclarationException) {
          {if (true) throw (DeclarationException)jjte000;}
      }
      if (jjte000 instanceof AssignmentException) {
          {if (true) throw (AssignmentException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Procedure() throws ParseException, DeclarationException, AssignmentException {
                    /*@bgen(jjtree) Procedure */
                    SimpleNode jjtn000 = new SimpleNode(JJTPROCEDURE);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);StatementTable st = new StatementTable(); boolean isTrue = true; boolean isLoop = false;
    try {
      jj_consume_token(VOID);
      jj_consume_token(MAIN);
      jj_consume_token(26);
      jj_consume_token(27);
      Block(st, isTrue, isLoop);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      if (jjte000 instanceof DeclarationException) {
          {if (true) throw (DeclarationException)jjte000;}
      }
      if (jjte000 instanceof AssignmentException) {
          {if (true) throw (AssignmentException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Block(StatementTable st, boolean isTrue, boolean isLoop) throws ParseException, DeclarationException, AssignmentException {
                                                                 /*@bgen(jjtree) Block */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(28);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 28:
          Block(st, isTrue, isLoop);
          break;
        case IF:
        case WHILE:
        case READ:
        case WRITE:
        case INT:
        case REAL:
        case IDENTIFIER:
          label_2:
          while (true) {
            Statement(st, isTrue, isLoop);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IF:
            case WHILE:
            case READ:
            case WRITE:
            case INT:
            case REAL:
            case IDENTIFIER:
              ;
              break;
            default:
              jj_la1[0] = jj_gen;
              break label_2;
            }
          }
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case WHILE:
        case READ:
        case WRITE:
        case INT:
        case REAL:
        case IDENTIFIER:
        case 28:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(29);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      if (jjte000 instanceof DeclarationException) {
          {if (true) throw (DeclarationException)jjte000;}
      }
      if (jjte000 instanceof AssignmentException) {
          {if (true) throw (AssignmentException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Statement(StatementTable st, boolean isTrue, boolean isLoop) throws ParseException, DeclarationException, AssignmentException {
                                                                     /*@bgen(jjtree) Statement */
                                                                     SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
                                                                     boolean jjtc000 = true;
                                                                     jjtree.openNodeScope(jjtn000);Token d = new Token(); Token i = new Token();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case REAL:
        Declaration(st, isTrue, isLoop);
        break;
      case IDENTIFIER:
        Assignment(st, isTrue, isLoop);
        break;
      case WHILE:
        jj_consume_token(WHILE);
        jj_consume_token(26);
        Condition(st, isTrue, true);
        jj_consume_token(27);
        Block(st, isTrue, true);
                                                                          jjtree.closeNodeScope(jjtn000, true);
                                                                          jjtc000 = false;
        st.startLoop(isTrue, true);
        break;
      case READ:
        jj_consume_token(READ);
        jj_consume_token(26);
        d = jj_consume_token(IDENTIFIER);
                                   st.read(d,isTrue,isLoop);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 30:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_3;
          }
          jj_consume_token(30);
          d = jj_consume_token(IDENTIFIER);
                                                                                                                st.read(d,isTrue,isLoop);
        }
        jj_consume_token(27);
        jj_consume_token(31);
        break;
      case WRITE:
        jj_consume_token(WRITE);
        jj_consume_token(26);
        d = Expression(st, isTrue, isLoop);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 32:
          jj_consume_token(32);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            i = jj_consume_token(IDENTIFIER);
            break;
          case INTEGER_LITERAL:
            i = jj_consume_token(INTEGER_LITERAL);
            break;
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(33);
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        st.write(d,i, isTrue, isLoop);i.image = null;
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 30:
            ;
            break;
          default:
            jj_la1[6] = jj_gen;
            break label_4;
          }
          jj_consume_token(30);
          d = Expression(st, isTrue, isLoop);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 32:
            jj_consume_token(32);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IDENTIFIER:
              i = jj_consume_token(IDENTIFIER);
              break;
            case INTEGER_LITERAL:
              i = jj_consume_token(INTEGER_LITERAL);
              break;
            default:
              jj_la1[7] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            jj_consume_token(33);
            break;
          default:
            jj_la1[8] = jj_gen;
            ;
          }
          st.write(d,i, isTrue, isLoop);
          i.image = null;
        }
        jj_consume_token(27);
        jj_consume_token(31);
        break;
      case IF:
        Choice(st, isTrue, isLoop);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      if (jjte000 instanceof DeclarationException) {
          {if (true) throw (DeclarationException)jjte000;}
      }
      if (jjte000 instanceof AssignmentException) {
          {if (true) throw (AssignmentException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Declaration(StatementTable st, boolean isTrue, boolean isLoop) throws ParseException, DeclarationException {
 /*@bgen(jjtree) Declaration */
 SimpleNode jjtn000 = new SimpleNode(JJTDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token state = new Token(); Token type = new Token(); Token d = new Token();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        type = jj_consume_token(INT);
        break;
      case REAL:
        type = jj_consume_token(REAL);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 32:
        d = jj_consume_token(32);
        jj_consume_token(33);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      state = jj_consume_token(IDENTIFIER);
      if(d.image == null) {
        st.addtoArray(type,state, isTrue, isLoop);
        }
      else {
        st.addtoArraylist(type,state, isTrue, isLoop);
        d.image = null;
        }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 30:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_5;
        }
        jj_consume_token(30);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 32:
          d = jj_consume_token(32);
          jj_consume_token(33);
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        state = jj_consume_token(IDENTIFIER);
                                          if(d.image == null) {
        st.addtoArray(type,state, isTrue, isLoop);
        }
      else {
        st.addtoArraylist(type,state, isTrue, isLoop);
        d.image = null;
        }
      }
      jj_consume_token(31);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Assignment(StatementTable st, boolean isTrue, boolean isLoop) throws ParseException, DeclarationException, AssignmentException {
                                                                      /*@bgen(jjtree) Assignment */
                                                                      SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT);
                                                                      boolean jjtc000 = true;
                                                                      jjtree.openNodeScope(jjtn000);Token state;Token d;Token i=new Token();
    try {
      state = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 32:
        jj_consume_token(32);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          i = jj_consume_token(IDENTIFIER);
          break;
        case INTEGER_LITERAL:
          i = jj_consume_token(INTEGER_LITERAL);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(33);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(ASSIGN);
      d = Expression(st, isTrue, isLoop);
      jj_consume_token(31);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      st.assign(state,i,d, isTrue, isLoop);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      if (jjte000 instanceof DeclarationException) {
          {if (true) throw (DeclarationException)jjte000;}
      }
      if (jjte000 instanceof AssignmentException) {
          {if (true) throw (AssignmentException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public Token Expression(StatementTable st, boolean isTrue, boolean isLoop) throws ParseException, DeclarationException, AssignmentException {
                                                                       /*@bgen(jjtree) Expression */
                                                                        SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
                                                                        boolean jjtc000 = true;
                                                                        jjtree.openNodeScope(jjtn000);Token token = new Token(); Token d1 = new Token(); Token d2 = new Token();
    try {
      d1 = Term(st, isTrue, isLoop);
      if (getToken(1).image == "+"
      || getToken(1).image == "-") {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          token = jj_consume_token(PLUS);
          break;
        case MINUS:
          token = jj_consume_token(MINUS);
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        d2 = Expression(st, isTrue, isLoop);
      } else {
        ;
      }
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
  if(token.image !=null){
   switch(token.image) {
        case "+":
            st.plus(d1, d2, isTrue, isLoop);
                {if (true) return d1;}
        case "-":
            st.minus(d1, d2, isTrue, isLoop);
                {if (true) return d1;}}
        }
        else {{if (true) return d1;} }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Choice(StatementTable st, boolean isTrue, boolean isLoop) throws ParseException, DeclarationException, AssignmentException {
                                                                  /*@bgen(jjtree) Choice */
  SimpleNode jjtn000 = new SimpleNode(JJTCHOICE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(26);
      isTrue = Condition(st, isTrue, isLoop);
      jj_consume_token(27);
      Block(st, isTrue, isLoop);
      label_6:
      while (true) {
        if (getToken(1).image == "else" && getToken(2).image == "if") {
          ;
        } else {
          break label_6;
        }
        jj_consume_token(ELSE);
        jj_consume_token(IF);
        jj_consume_token(26);
        isTrue = Condition(st, isTrue, isLoop);
        jj_consume_token(27);
        Block(st, isTrue, isLoop);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        Block(st, !isTrue, isLoop);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public boolean Condition(StatementTable st, boolean isTrue, boolean isLoop) throws ParseException, DeclarationException, AssignmentException {
                                                                        /*@bgen(jjtree) Condition */
                                                                        SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
                                                                        boolean jjtc000 = true;
                                                                        jjtree.openNodeScope(jjtn000);Token left = new Token(); Token right = new Token(); Token sign = new Token();
    try {
      left = Expression(st, isTrue, isLoop);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 34:
        sign = jj_consume_token(34);
        break;
      case 35:
        sign = jj_consume_token(35);
        break;
      case 36:
        sign = jj_consume_token(36);
        break;
      case 37:
        sign = jj_consume_token(37);
        break;
      case 38:
        sign = jj_consume_token(38);
        break;
      case 39:
        sign = jj_consume_token(39);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = Expression(st, isTrue, isLoop);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {if (true) return st.condition(left,sign,right,isTrue,isLoop);}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token Term(StatementTable st, boolean isTrue, boolean isLoop) throws ParseException, DeclarationException, AssignmentException {
                                                                 /*@bgen(jjtree) Term */
                                                                  SimpleNode jjtn000 = new SimpleNode(JJTTERM);
                                                                  boolean jjtc000 = true;
                                                                  jjtree.openNodeScope(jjtn000);Token token = new Token(); Token d1 = new Token(); Token d2 = new Token();
    try {
      d1 = Factor(st, isTrue, isLoop);
      if (getToken(1).image == "*"
      || getToken(1).image == "/") {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
          token = jj_consume_token(MULTIPLY);
          break;
        case DIVIDE:
          token = jj_consume_token(DIVIDE);
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        d2 = Term(st, isTrue, isLoop);
      } else {
        ;
      }
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
  if(token.image !=null){
   switch(token.image) {
        case "*":
            st.mult(d1, d2, isTrue, isLoop);
                {if (true) return d1;}
        case "/":
            st.div(d1, d2, isTrue, isLoop);
                {if (true) return d1;}}
        }else {{if (true) return d1;} }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token Factor(StatementTable st, boolean isTrue, boolean isLoop) throws ParseException, DeclarationException, AssignmentException {
                                                                   /*@bgen(jjtree) Factor */
                                                                   SimpleNode jjtn000 = new SimpleNode(JJTFACTOR);
                                                                   boolean jjtc000 = true;
                                                                   jjtree.openNodeScope(jjtn000);Token token = new Token();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        token = jj_consume_token(IDENTIFIER);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
        token.value = StatementTable.map.get(token.image);
        {if (true) return token;}
        break;
      case INTEGER_LITERAL:
        token = jj_consume_token(INTEGER_LITERAL);
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
        token.value = Integer.parseInt(token.image);
        {if (true) return token;}
        break;
      case REAL_LITERAL:
        token = jj_consume_token(REAL_LITERAL);
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
        token.value = Double.parseDouble(token.image);
        {if (true) return token;}
        break;
      case 26:
        jj_consume_token(26);
        token = Expression(st,isTrue, isLoop);
        jj_consume_token(27);
                                                    jjtree.closeNodeScope(jjtn000, true);
                                                    jjtc000 = false;
                                                   {if (true) return token;}
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CMMCompilerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[21];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x43e80,0x10043e80,0x10043e80,0x40000000,0x50000,0x0,0x40000000,0x50000,0x0,0x43e80,0x3000,0x0,0x40000000,0x0,0x50000,0x0,0x600000,0x100,0x0,0x1800000,0x4070000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x1,0x0,0x1,0x0,0x0,0xfc,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public CMMCompiler(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CMMCompiler(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      ReInit(stream);
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CMMCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CMMCompiler(java.io.Reader stream) {
    if (jj_initialized_once) {
      ReInit(stream);
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CMMCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CMMCompiler(CMMCompilerTokenManager tm) {
    if (jj_initialized_once) {
      ReInit(tm);
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CMMCompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      token_list += "           " + token.image + "\n";
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[40];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 21; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 40; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
